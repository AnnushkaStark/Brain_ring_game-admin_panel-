class Question(object):

    def __init__(self, difficulty: int, age: int, topic: str, question: str, answer: str) -> None:
        self.difficulty = difficulty
        self.age = age
        self.topic = topic
        self.question = question
        self.answer = answer

    def get_difficulty(self):
        return self.difficulty
        
    def get_question(self):
        return self.question
        
    def get_answer(self):
        return self.answer

# Тест работы класса Questions
questions = []
'''
Нужно подумать, как хранить вопросы (временно можно и список, но для конечной версии - надо поискать решение).
Варианты (можно предлагать другие):
Список - нормально ли он будет работать на большом количестве вопросом (тысячи)
         Если придётся часто крутить список с вопросами для отбора, например,
         рандомных вопросов определенной сложности для определенного возраста, то это будет очень долго.
         Плюс каждый элемент содержит большое количество текста. Не уверен, что это будет нормально работать.
БД - по идее БД с этим справится лучше. Можно делать разные выборки, сортировки, добавлять разные категории
     и выполнять прочие операции с данными специально для этого сделанным инструментом.'''
                
questions.append(Question(1, 15, 'Тема вопроса 0', 'Текст вопроса 0', 'Ответ вопроса 0'))
questions.append(Question(1, 6, 'Тема вопроса 0', 'Текст вопроса 0', 'Ответ вопроса 0'))  # Общий вид вопроса (поля могут добавляться)
questions.append(Question(1, 10, 'Математика', 'Сколько будет дважды два?', '4'))
questions.append(Question(1, 18, 'Юмор', 'Согласно одной несерьезной новости, на открытии нового корпуса роддома президент... Что сделал? Ответьте двумя словами, начинающимися с одной и той же буквы', 'Перерезал пуповину'))
questions.append(Question(2, 6, 'Личности', 'В одном из интервью этот уроженец Мурома возмущался: "Зачем они показывают такое по всем программам? Ужасы, драки и убийства! Я бы не позволил своим детям и близко подходить к этому аппарату!". Назовите его фамилию.', 'Зворыкин'))

